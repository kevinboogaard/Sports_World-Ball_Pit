var namespace = namespace || {};

namespace.ClassName = (function () {

    /**
     * 'Function / Class name'
     * { if static } @static
     * { if private } @private
     * { if abstract } @abstract
     * { if extends } @extends {class}
     * { if returns } @returns {type}
     * @param {type} (if optional) {optional} (endif) 'name'
     * 
     * { if example is needed } @example 
     *
     * Additional comments when needed.
     */
    function ClassName(param1, param2) {
        // { if extends } namespace.Parent.call(this, param1, param2);

        this.initialize();
    }
    /* { if extends } ClassName.prototype = Object.create(namespace.Parent.prototype);
        { if extends } ClassName.prototype.constructor = ClassName; */
    var p = ClassName.prototype;

    p.initialize = function () { }

    /* { if extends } p.__parentclassname_dispose = p.dispose; */
    p.dispose = function () {
        /* { if extends } this.__parentclassname_dispose(); */
    }

    return ClassName;
}());